name: Android build (robust Gradle download + fallback) and save APK to output/

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PUSH_TO_REPO: 'false'
      GRADLE_VERSION: '8.4'   # istersen 8.5 vb. ile test edebilirsin
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl ca-certificates

      - name: Download Gradle with retries and verify zip
        run: |
          GRADLE_ZIP="/tmp/gradle-${GRADLE_VERSION}-bin.zip"
          GRADLE_URL="https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip"
          echo "Attempting to download Gradle from: $GRADLE_URL"
          # try robust curl with retries
          curl --fail -fSL --retry 6 --retry-delay 5 -o "$GRADLE_ZIP" "$GRADLE_URL" || true
          if [ ! -s "$GRADLE_ZIP" ]; then
            echo "Gradle zip missing or empty: $GRADLE_ZIP"
            ls -l /tmp || true
            exit 2
          fi
          # quick sanity check of zip file
          if unzip -t "$GRADLE_ZIP" > /tmp/gradle-unzip-check.txt 2>&1; then
            echo "Gradle zip verified ok"
            sudo unzip -q "$GRADLE_ZIP" -d /opt/
            sudo ln -sfn /opt/gradle-${GRADLE_VERSION} /opt/gradle
          else
            echo "Gradle zip verification FAILED. Dumping first 200 bytes for debug:"
            head -c 200 "$GRADLE_ZIP" | hexdump -C || true
            echo "Will attempt fallback to apt-get gradle (may be older version)."
            sudo apt-get update
            sudo apt-get install -y gradle || { echo "apt-get gradle failed"; exit 3; }
          fi
          /opt/gradle/bin/gradle -v || gradle -v || true

      - name: Ensure Gradle on PATH
        run: |
          if [ -d /opt/gradle/bin ]; then
            echo "/opt/gradle/bin" >> $GITHUB_PATH
          fi
          # if system gradle is present it will be available as 'gradle'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/*.gradle.kts') }}
          restore-keys: |
            gradle-cache-${{ runner.os }}-

      - name: Build debug APK
        run: |
          echo "Building :app:assembleDebug using 'gradle' on PATH"
          gradle :app:assembleDebug --no-daemon --stacktrace
        timeout-minutes: 30

      - name: Create output dir and copy APK
        run: |
          mkdir -p output
          APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
          if [ -f "$APK_PATH" ]; then
            cp "$APK_PATH" output/app-debug.apk
            echo "APK copied to output/app-debug.apk"
            ls -lh output || true
          else
            echo "APK not found at expected path: $APK_PATH"
            ls -la app/build || true
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: output/app-debug.apk

      - name: (Optional) Commit output/ to repo
        if: env.PUSH_TO_REPO == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add output/app-debug.apk || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ci: add built debug apk to output/ [skip ci]" || true
            git push origin HEAD:main || true
          fi
